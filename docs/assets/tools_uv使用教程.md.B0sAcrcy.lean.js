import{_ as a,c as i,a2 as e,o as t}from"./chunks/framework.CAQ3h1-a.js";const k=JSON.parse('{"title":"uv 使用教程","description":"","frontmatter":{},"headers":[],"relativePath":"tools/uv使用教程.md","filePath":"tools/uv使用教程.md","lastUpdated":1756831131000}'),n={name:"tools/uv使用教程.md"};function l(p,s,h,o,d,c){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="uv-使用教程" tabindex="-1">uv 使用教程 <a class="header-anchor" href="#uv-使用教程" aria-label="Permalink to &quot;uv 使用教程&quot;">​</a></h1><p>首先 <a href="https://docs.astral.sh/uv/" target="_blank" rel="noreferrer">uv</a> 是一个继 python 版本管理、包管理、项目管理、虚拟环境管理于一体的工具，且其底层是由 Rust 编写的，所以性能也是非常优秀。 相比于传统的 conda，uv 的优势在于：</p><ul><li>uv 的性能比 conda 更快</li><li>uv 的安装包体积更小</li><li>uv 更方便管理环境</li><li>uv 还支持临时安装包去运行项目</li></ul><h2 id="uv-解决了什么问题" tabindex="-1">uv 解决了什么问题？ <a class="header-anchor" href="#uv-解决了什么问题" aria-label="Permalink to &quot;uv 解决了什么问题？&quot;">​</a></h2><p><code>uv</code> 主要是解决了手动去管理 <code>python</code> 项目的虚拟环境、包依赖、命令行工具等问题。</p><h3 id="传统的-python-项目开发" tabindex="-1">传统的 python 项目开发 <a class="header-anchor" href="#传统的-python-项目开发" aria-label="Permalink to &quot;传统的 python 项目开发&quot;">​</a></h3><p>在传统的 python 项目开发中，开发流程是这样的：</p><ol><li>通过 <code>python -m venv .venv</code> 来为项目创建虚拟环境。</li><li>接着在开发过程中，通过 <code>pip install package_name</code> 来安装项目中所使用的依赖。</li><li>最后通过 <code>pip freeze &gt; requirements.txt</code> 来将依赖信息写入到 <code>requirements.txt</code> 文件中。</li></ol><p>但是，这种开发流程存在一些问题：</p><ul><li>在安装依赖的过程中，会在 <code>requirements.txt</code> 中写入所有的直接依赖和间接依赖，导致很难被维护。</li></ul><h3 id="在传统的基础上针对-requirements-依赖问题进行优化" tabindex="-1">在传统的基础上针对 requirements 依赖问题进行优化 <a class="header-anchor" href="#在传统的基础上针对-requirements-依赖问题进行优化" aria-label="Permalink to &quot;在传统的基础上针对 requirements 依赖问题进行优化&quot;">​</a></h3><p>出现了 <code>requirements.txt</code> 直接依赖和间接依赖的问题后，社区推出了 <code>pyproject.toml</code> 文件，通过该文件来进行管理项目的依赖问题。</p><p>可以直接在 <code>pyproject.toml</code> 文件中写入依赖信息，然后通过 <code>pip install -e .</code> 来安装依赖，这样就会自动处理好所有的间接依赖问题。</p><p>自此，python 项目开发流程变成了：</p><ol><li>通过 <code>python -m venv .venv</code> 来为项目创建虚拟环境。</li><li>接着激活虚拟环境 <code>source .venv\\Scripts\\activate</code>。</li><li>然后在开发过程中，通过编辑 <code>pyproject.toml</code> 文件来添加依赖信息。</li><li>接着通过 <code>pip install -e .</code> 来进行安装依赖。</li></ol><p><strong><em>但是每一次都按照上面的流程去走，略显麻烦，所以出现了 <code>uv</code>，其实 <code>uv</code> 只是针对上面的步骤进行了更进一步的封装。</em></strong></p><h2 id="uv-安装" tabindex="-1">uv 安装 <a class="header-anchor" href="#uv-安装" aria-label="Permalink to &quot;uv 安装&quot;">​</a></h2><p>uv 的安装非常简单，下面的命令是通过 <code>pip</code> 来进行安装的：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uv</span></span></code></pre></div><h2 id="使用-uv-创建项目" tabindex="-1">使用 uv 创建项目 <a class="header-anchor" href="#使用-uv-创建项目" aria-label="Permalink to &quot;使用 uv 创建项目&quot;">​</a></h2><p>在正常的 python 项目当中，通常包含 <code>.gitignore</code> , <code>readme.md</code>, <code>requirements.txt</code>, 以及项目源代码。</p><p>那么通过 uv 来创建项目，只需要在命令行中输入以下命令即可：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> project_name</span></span></code></pre></div><p>uv 会自动创建一个项目目录，目录结构如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project_name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .gitignore</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .python-version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyproject.toml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> README.md</span></span></code></pre></div><ul><li><code>.python-version</code>：项目的 python 版本，也是 uv 运行 python 指定的版本。</li><li><code>pyproject.toml</code>：项目的使用说明书，包含项目的名称、版本、描述、依赖包等信息。</li></ul><p>主要是这两个文件，这两个文件是 uv 管理项目虚拟环境的关键。</p><h2 id="使用-uv-管理环境" tabindex="-1">使用 uv 管理环境 <a class="header-anchor" href="#使用-uv-管理环境" aria-label="Permalink to &quot;使用 uv 管理环境&quot;">​</a></h2><h3 id="通过-uv-管理-python-版本" tabindex="-1">通过 uv 管理 python 版本 <a class="header-anchor" href="#通过-uv-管理-python-版本" aria-label="Permalink to &quot;通过 uv 管理 python 版本&quot;">​</a></h3><p>uv 跟 conda 一样，可以进行 python 版本的管理。</p><ul><li>安装特定的 python 版本：<code>uv python install 3.12 3.13</code> , 这行命令会安装 python 3.12 和 3.13 版本。</li><li>切换 python 版本：<code>uv python pin 3.12</code> , 这行命令会切换到 python 3.12 版本。</li><li>查看安装的 python 版本：<code>uv python list --only-installed</code> , 这行命令会列出所有安装的 python 版本。</li><li>卸载 python 版本：<code>uv python uninstall 3.12</code> , 这行命令会卸载 python 3.12 版本。</li></ul><h3 id="通过-uv-添加项目依赖" tabindex="-1">通过 uv 添加项目依赖 <a class="header-anchor" href="#通过-uv-添加项目依赖" aria-label="Permalink to &quot;通过 uv 添加项目依赖&quot;">​</a></h3><p>uv 除了可以管理 python 版本之外，还可以管理项目依赖。uv 还会自动将项目依赖信息写入到 <code>pyproject.toml</code> 文件中。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package_name</span></span></code></pre></div><p>通过以上的命令，uv 会自动将项目依赖进行下载并将以来信息写入到 <code>pyproject.toml</code> 文件中。</p><h3 id="通过-uv-将项目的依赖进行安装" tabindex="-1">通过 uv 将项目的依赖进行安装 <a class="header-anchor" href="#通过-uv-将项目的依赖进行安装" aria-label="Permalink to &quot;通过 uv 将项目的依赖进行安装&quot;">​</a></h3><p>在 python 中对于项目的依赖，常常对前端同学很是羡慕，毕竟前端同学可以直接 <code>npm install</code> 就可以安装依赖。那么在 uv 当中，也有类似的命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sync</span></span></code></pre></div><p>通过上述命令，uv 会自动将项目中 <code>pyproject.toml</code> 文件中的依赖进行安装。</p><h2 id="使用-uv-管理命令行工具" tabindex="-1">使用 uv 管理命令行工具 <a class="header-anchor" href="#使用-uv-管理命令行工具" aria-label="Permalink to &quot;使用 uv 管理命令行工具&quot;">​</a></h2><p>python 中拥有一些命令行工具，类似 pytest 用来进行单元测试，ruff 用来检查格式等工具。那么这种在命令行中运行的工具，uv 提供了统一的管理。</p><p>uv 通过 <code>uv tool install package_name</code> 来安装命令行工具(安装到全局环境当中)。这样就可以直接进行使用对应的命令行工具，而无需在任何环境当中。</p><p>同样的，可以通过 <code>uv tool uninstall package_name</code> 来卸载命令行工具(从全局环境中卸载)。</p><h3 id="通过-uv-临时的虚拟环境来运行工具" tabindex="-1">通过 uv 临时的虚拟环境来运行工具 <a class="header-anchor" href="#通过-uv-临时的虚拟环境来运行工具" aria-label="Permalink to &quot;通过 uv 临时的虚拟环境来运行工具&quot;">​</a></h3><p>在 uv 当中，可以通过 <code>uvx package_name</code> 来运行对应的命令行工具。这种方式，uv 会自动创建一个临时的虚拟环境，然后安装对应的工具，最后运行对应的工具。但是该工具并不会安装到本地当中。</p><h3 id="通过-uv-临时虚拟环境运行-python-文件" tabindex="-1">通过 uv 临时虚拟环境运行 python 文件 <a class="header-anchor" href="#通过-uv-临时虚拟环境运行-python-文件" aria-label="Permalink to &quot;通过 uv 临时虚拟环境运行 python 文件&quot;">​</a></h3><p>假设一个 python 文件 <code>main.py</code> 中需要依赖其他第三方包，但是在本地当中并没有该包，那么正常来说通过 <code>python main.py</code> 运行项目会报错无法正常运行。</p><p>但是 uv 中提供了一个非常方便的操作：</p><ol><li>首先通过 <code>uv init --script main.py</code> 来针对 <code>main.py</code> 进行 uv 的初始化，此时 uv 会将一些依赖信息写入该文件的最开头。</li><li>在 uv 生成的信息当中填写对应需要的依赖信息。</li><li>通过 <code>uv run main.py</code> 即可成功运行 <code>main.py</code> 文件。</li></ol><h2 id="如何使用-uv-开发项目" tabindex="-1">* 如何使用 uv 开发项目？ <a class="header-anchor" href="#如何使用-uv-开发项目" aria-label="Permalink to &quot;\\* 如何使用 uv 开发项目？&quot;">​</a></h2><p>接下来将演示如何使用 <code>uv</code> 来开发一个主流的规范的 <code>python</code> 项目。</p><h3 id="_1-创建项目" tabindex="-1">1. 创建项目 <a class="header-anchor" href="#_1-创建项目" aria-label="Permalink to &quot;1. 创建项目&quot;">​</a></h3><p>创建项目的命令如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> halo</span></span></code></pre></div><p><strong><em>TIPS：</em></strong> <code>uv</code> 自动生成的 <code>main.py</code> 可以直接删除。</p><p>如果使用的是 <code>vscode</code> 进行开发~~(非 vscode 不用看，因为会自动识别到虚拟环境)~~，可以通过设置右下角 <code>python</code> 虚拟环境为当前目录下的 <code>.venv</code> 虚拟环境。这样在 vscode 中就会识别到你虚拟环境中依赖的包，方便开发。</p><h3 id="_2-添加项目依赖" tabindex="-1">2. 添加项目依赖 <a class="header-anchor" href="#_2-添加项目依赖" aria-label="Permalink to &quot;2. 添加项目依赖&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flask</span></span></code></pre></div><h3 id="_3-整理项目结构-开发项目" tabindex="-1">3. 整理项目结构/开发项目 <a class="header-anchor" href="#_3-整理项目结构-开发项目" aria-label="Permalink to &quot;3. 整理项目结构/开发项目&quot;">​</a></h3><p>通常会在项目的根目录下的 <code>src</code> 目录下新建一个跟项目名称相同的文件夹(<strong>例：halo/src/halo</strong>)，然后在该文件夹下进行开发。</p><p>标准的 <code>python</code> 项目结构如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">halo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .gitignore</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .python-version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api-intro.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test_halo.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> halo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyproject.toml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> README.md</span></span></code></pre></div><h3 id="_4-如何使用别人的项目" tabindex="-1">*4. 如何使用别人的项目 <a class="header-anchor" href="#_4-如何使用别人的项目" aria-label="Permalink to &quot;\\*4. 如何使用别人的项目&quot;">​</a></h3><p>通常在 <code>GitHub</code> 拉取成功别人的项目之后。我们可以通过 <code>uv sync</code> 命令，该命令可以自动将 <code>pyproject.toml</code> 文件中的依赖进行安装。 接着，通过 <code>uv run main.py</code> 来运行项目即可，非常简单！</p>`,64)]))}const u=a(n,[["render",l]]);export{k as __pageData,u as default};
