import{_ as i,c as a,a2 as n,o as e}from"./chunks/framework.CAQ3h1-a.js";const E=JSON.parse('{"title":"Node.js 笔记","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/NodeJsNote.md","filePath":"frontend/NodeJsNote.md","lastUpdated":1744040711000}'),t={name:"frontend/NodeJsNote.md"};function h(l,s,p,k,d,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="node-js-笔记" tabindex="-1">Node.js 笔记 <a class="header-anchor" href="#node-js-笔记" aria-label="Permalink to &quot;Node.js 笔记&quot;">​</a></h1><h2 id="_0-nodejs-介绍" tabindex="-1">0. NodeJs 介绍 <a class="header-anchor" href="#_0-nodejs-介绍" aria-label="Permalink to &quot;0. NodeJs 介绍&quot;">​</a></h2><p>首先 NodeJs 不是编程语言，因为编程语言是 JavaScript 而 NodeJs 是 JavaScript 的运行环境。NodeJs 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，它可以让 JavaScript 代码在服务器端运行。而 Chrome V8 引擎是 C/C++ 编写的，因此编写的 JavaScript 代码需要通过 C/C++ 程序转化后运行。</p><p>NodeJs 是一个事件驱动的非阻塞 I/O 模型，可以高效处理大量并发请求。NodeJs 非常适合干一些 IO 密集型的应用，但是不适用于 CPU 密集型(计算型)的应用。</p><h2 id="_1-nodejs-安装" tabindex="-1">1. NodeJs 安装 <a class="header-anchor" href="#_1-nodejs-安装" aria-label="Permalink to &quot;1. NodeJs 安装&quot;">​</a></h2><p>NodeJs 可以从官方网站下载安装包安装，也可以使用包管理器安装。安装长期支持版(LTS)版本即可。</p><h2 id="_2-npm-package-json" tabindex="-1">2. npm package json <a class="header-anchor" href="#_2-npm-package-json" aria-label="Permalink to &quot;2. npm package json&quot;">​</a></h2><p>npm 的全称是 node package manager，是一个 Node.js 包管理器。它可以帮助我们管理 Node.js 项目中的依赖包。</p><h3 id="_2-1-npm-命令" tabindex="-1">2.1 npm 命令 <a class="header-anchor" href="#_2-1-npm-命令" aria-label="Permalink to &quot;2.1 npm 命令&quot;">​</a></h3><ol><li><code>npm init</code>: 初始化一个新的 npm 项目，并会生成一个 package.json 文件。</li><li><code>npm install</code>: 安装依赖包，根据 package.json 文件中的依赖项安装依赖包。</li><li><code>npm install &lt;package-name&gt;</code>: 安装指定的 package-name 包</li><li><code>npm install &lt;package-name&gt; --save</code>: 安装指定的 package-name 包并将其添加到 dependencies 字段中。</li><li><code>npm install &lt;package-name&gt; --save-dev</code>: 安装指定的 package-name 包并将其添加到 devDependencies 字段中。</li><li><code>npm install -g &lt;package-name&gt;</code>: 安装全局 package-name 包, 即安装到全局环境中。</li><li><code>npm update &lt;package-name&gt;</code>: 更新指定的 package-name 包。</li><li><code>npm uninstall &lt;package-name&gt;</code>: 卸载指定的 package-name 包。</li><li><code>npm list</code>: 列出当前项目的依赖包。</li><li><code>npm run &lt;script-name&gt;</code>: 执行 package.json 文件中 scripts 字段中指定的脚本。</li><li><code>npm search &lt;keyword&gt;</code>: 搜索 npm 库中包含 keyword 的包。</li><li><code>npm info &lt;package-name&gt;</code>: 显示 package-name 包的详细信息。</li><li><code>npm outdated</code>: 显示过期的依赖包，即显示需要更新的包</li><li><code>npm audit</code>: 检查当前项目中依赖项是否存在安全性漏洞。</li><li><code>npm publish</code>: 发布当前项目的包到 npm 库。</li><li><code>npm login</code>: 登录 npm 账户</li><li><code>npm logout</code>: 登出 npm 账户</li><li><code>npm config list</code>: 显示 npm 配置信息。</li><li><code>npm get registry</code>: 显示当前 npm 库的地址。</li><li><code>npm set registry &lt;registry-url&gt;</code>: 设置 npm 库的地址。</li></ol><h3 id="_2-2-package-json-文件" tabindex="-1">2.2 package.json 文件 <a class="header-anchor" href="#_2-2-package-json-文件" aria-label="Permalink to &quot;2.2 package.json 文件&quot;">​</a></h3><ol><li><code>name</code>：项目名称，必须是唯一的字符串，通常采用小写字母和连字符的组合。</li><li><code>version</code>：项目版本号，通常采用语义化版本号规范。三段式版本号，大版本号.小版本号.修订号。大版本号一般是有重大变化才会升级，而小版本号是增加功能进行升级，修订号一般是修改 bug 进行升级</li><li><code>description</code>：项目描述。</li><li><code>main</code>：项目的主入口文件路径，通常是一个 JavaScript 文件。</li><li><code>keywords</code>：项目的关键字列表，方便他人搜索和发现该项目。</li><li><code>author</code>：项目作者的信息，包括姓名、邮箱、网址等。</li><li><code>license</code>：项目的许可证类型，可以是自定义的许可证类型或者常见的开源许可证（如 MIT、Apache 等）。</li><li><code>dependencies</code>：项目所依赖的包的列表，这些包会在项目运行时自动安装。</li><li><code>devDependencies</code>：项目开发过程中所需要的包的列表，这些包不会随项目一起发布，而是只在开发时使用。</li><li><code>peerDependencies</code>：项目的同级依赖，即项目所需要的模块被其他模块所依赖。</li><li><code>scripts</code>：定义了一些脚本命令，比如启动项目、运行测试等。</li><li><code>repository</code>：项目代码仓库的信息，包括类型、网址等。</li><li><code>bugs</code>：项目的 bug 报告地址。</li><li><code>homepage</code>：项目的官方网站地址或者文档地址。</li></ol><h2 id="_3-npm-run-xxx-命令" tabindex="-1">3. npm run xxx 命令 <a class="header-anchor" href="#_3-npm-run-xxx-命令" aria-label="Permalink to &quot;3. npm run xxx 命令&quot;">​</a></h2><p>终端中 <code>npm run xxx</code> 命令可以执行 <code>package.json</code> 文件中 <code>scripts</code> 字段中指定的脚本。那么这一行命令的执行过程是这样的：</p><ul><li>先从当前项目下的 <code>node_modules</code> 目录下的 <code>.bin</code> 目录，查找是否有 <code>xxx</code> 脚本命令，如果有则执行；</li><li>如果没有找到则去全局环境的 <code>node_modules</code> 目录下的 <code>.bin</code> 目录，查找是否有 <code>xxx</code> 脚本命令，如果有则执行；</li><li>如果还是没有则去环境变量中进行查找</li><li>如果以上都没有查找到，则报错处理</li></ul><p>如果成功找到则会根据当前电脑的去执行对应电脑平台的可执行脚本。</p><h3 id="_3-1-npm-的生命周期" tabindex="-1">3.1 npm 的生命周期 <a class="header-anchor" href="#_3-1-npm-的生命周期" aria-label="Permalink to &quot;3.1 npm 的生命周期&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;predev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node predev.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postdev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node postdev.js&quot;</span></span></code></pre></div><ol><li><code>predev</code>：在 <code>npm run dev</code> 之前执行的脚本</li><li><code>dev</code>：开发环境启动脚本</li><li><code>postdev</code>：在 <code>npm run dev</code> 之后执行的脚本</li></ol><h2 id="_4-npx" tabindex="-1">4. npx <a class="header-anchor" href="#_4-npx" aria-label="Permalink to &quot;4. npx&quot;">​</a></h2><p>npx 是一个命令行工具，它是 npm 5.2.0 版本中新增的功能。它允许用户在不安装全局包的情况下，运行已安装在本地项目中的包或者远程仓库中的包。 npx 的作用是在命令行中运行 node 包中的可执行文件，而不需要全局安装这些包。这可以使开发人员更轻松地管理包的依赖关系，并且可以避免全局污染的问题。它还可以帮助开发人员在项目中使用不同版本的包，而不会出现版本冲突的问题。</p><h3 id="_4-1-npm-和-npx-区别" tabindex="-1">4.1 npm 和 npx 区别 <a class="header-anchor" href="#_4-1-npm-和-npx-区别" aria-label="Permalink to &quot;4.1 npm 和 npx 区别&quot;">​</a></h3><ul><li>npx 侧重于执行命令的，执行某个模块命令。虽然会自动安装模块，但是重在执行某个命令</li><li>npm 侧重于安装或者卸载某个模块的。重在安装，并不具备执行某个模块的功能。</li></ul><p>npx 的运行规则和 npm 是一样的 本地目录 <code>node_modules</code> 下查找 <code>.bin</code> 目录 看有没有 如果没有就去全局的 <code>node_moduels</code> 查找，如果还没有就去下载这个包然后运行命令，然后删除这个包。</p><h2 id="_5-npm-包的发布" tabindex="-1">5. npm 包的发布 <a class="header-anchor" href="#_5-npm-包的发布" aria-label="Permalink to &quot;5. npm 包的发布&quot;">​</a></h2><p>首先需要创建账号: <code>npm adduser</code></p><p>然后登录你创建的账号: <code>npm login</code></p><p>登陆完成后，配置好你的 <code>package.json</code> 文件，然后给项目起一个 <code>name</code> ，得保证这个 <code>name</code> 是唯一的，与别人不能一样。接着就可以进行 <code>npm publish</code> 命令发布你的包了。如果发布出去的网页出现 403 错误，则说明包名被占用了。</p><h2 id="_6-nodejs-模块化" tabindex="-1">6. NodeJs 模块化 <a class="header-anchor" href="#_6-nodejs-模块化" aria-label="Permalink to &quot;6. NodeJs 模块化&quot;">​</a></h2><p>Nodejs 模块化规范遵循两套一 套 CommonJS 规范另一套 esm 规范</p><h3 id="_6-1-commonjs-规范" tabindex="-1">6.1 CommonJS 规范 <a class="header-anchor" href="#_6-1-commonjs-规范" aria-label="Permalink to &quot;6.1 CommonJS 规范&quot;">​</a></h3><p><strong>引入模块(require)：</strong></p><ol><li>支持引入内置模块 http os fs 等 node 内置模块</li><li>支持引入第三方模块 express react 等第三方模块</li><li>支持引入自定义模块，需要通过 ../../ 这种方式引入</li><li>支持引入 addon C++扩展模块 .node 文件</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;express&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./myModule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nodeModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./nodeModule.node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><strong>导出模块(exports)和导出对象(module.exports)：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// myModule.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_6-2-esm-规范" tabindex="-1">6.2 ESM 规范 <a class="header-anchor" href="#_6-2-esm-规范" aria-label="Permalink to &quot;6.2 ESM 规范&quot;">​</a></h3><p><strong>引入模块(import)：</strong> 必须写在头部，并且在 package.json 中配置 <code>&quot;type&quot;: &quot;module&quot;</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./data.json&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引入json文件需要特殊断言处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> all </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./all.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载模块的整体对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> flag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (flag) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./test.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 动态导入模块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>导出模块(export default)</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_6-3-cjs-和-esm-的区别" tabindex="-1">6.3 Cjs 和 ESM 的区别 <a class="header-anchor" href="#_6-3-cjs-和-esm-的区别" aria-label="Permalink to &quot;6.3 Cjs 和 ESM 的区别&quot;">​</a></h3><ul><li>CommonJS 是基于运行时的同步加载, ESM 是基于编译时的异步加载</li><li>CommonJS 是可以修改值的, ESM 值并且不可修改（可读的）</li><li>CommonJS 不可以 tree shaking, ESM 支持 tree shaking</li><li>CommonJS 中顶层的 this 指向这个模块本身，而 ES6 中顶层 this 指向 undefined</li></ul><h2 id="_7-nodejs-全局变量" tabindex="-1">7. NodeJs 全局变量 <a class="header-anchor" href="#_7-nodejs-全局变量" aria-label="Permalink to &quot;7. NodeJs 全局变量&quot;">​</a></h2><p>在浏览器中，全局变量是 window 对象，而在 NodeJs 中，全局变量是 global 对象。</p><p>现在可以通过 <code>globalThis</code> 这个变量来获取全局变量，它是 ES2020 引入的，可以兼容浏览器和 NodeJs。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">globalThis.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sw&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(globalThis.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 &quot;sw&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(global.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// node 内输出 &quot;sw&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 浏览器内输出 &quot;sw&quot;</span></span></code></pre></div><h3 id="nodejs-与在浏览器的-js-的区别" tabindex="-1">NodeJS 与在浏览器的 JS 的区别 <a class="header-anchor" href="#nodejs-与在浏览器的-js-的区别" aria-label="Permalink to &quot;NodeJS 与在浏览器的 JS 的区别&quot;">​</a></h3><p>首先 JS 是由 ECMAScript Dom Bom 组成的。但是在 NodeJs 中是无法进行使用 DOM 和 BOM 的。所有与 DOM 或 BOM 相关的 API 都是无法进行使用的，会在直接报错。</p><h3 id="node-环境内置-api" tabindex="-1">Node 环境内置 API <a class="header-anchor" href="#node-环境内置-api" aria-label="Permalink to &quot;Node 环境内置 API&quot;">​</a></h3><h4 id="dirname" tabindex="-1">__dirname <a class="header-anchor" href="#dirname" aria-label="Permalink to &quot;\\_\\_dirname&quot;">​</a></h4><p><code>__dirname</code> 是一个全局变量，它指向当前模块文件所在的目录。即执行该脚本所在的目录。</p><h4 id="filename" tabindex="-1">__filename <a class="header-anchor" href="#filename" aria-label="Permalink to &quot;\\_\\_filename&quot;">​</a></h4><p><code>__filename</code> 是一个全局变量，它指向当前模块文件的完整路径。跟上面的区别在于，会多出当前的文件名。</p><h4 id="process" tabindex="-1">process <a class="header-anchor" href="#process" aria-label="Permalink to &quot;process&quot;">​</a></h4><p><code>process</code> 是一个全局变量，它是一个对象，包含了当前 Node 进程的一些信息。</p><ul><li><code>process.argv</code> 是一个数组，包含了执行脚本时传入的参数。<code>node index.js -x 1 -y 2</code> 则 <code>process.argv</code> 值为 <code>[&quot;node&quot;, &quot;index.js&quot;, &quot;-x&quot;, &quot;1&quot;, &quot;-y&quot;, &quot;2&quot;]</code></li><li><code>process.cwd()</code> 是一个方法，返回当前进程的工作目录。</li><li><code>process.exit()</code> 是一个方法，可以退出当前进程。</li><li><code>process.on(&#39;exit&#39;, function(code) { })</code> 一个事件，当 Node 进程退出时，会触发该事件。不只是可以监听退出事件，还可以监听其他事件。</li></ul><h2 id="_8-csr、ssr、seo" tabindex="-1">8. CSR、SSR、SEO <a class="header-anchor" href="#_8-csr、ssr、seo" aria-label="Permalink to &quot;8. CSR、SSR、SEO&quot;">​</a></h2><p>CSR（Client Side Rendering）：客户端渲染，即在<code>浏览器</code>端将 HTML、CSS、JavaScript 代码<code>通过 JS 动态生成</code>页面。</p><p>SSR（Server Side Rendering）：服务器端渲染，即在<code>X服务器</code>端将 HTML、CSS、JavaScript 代码<code>通过 NodeJs 动态生成</code>(生成完成页面后再将页面数据返回给前端)页面。</p><p>很明显的一个区别就是，CSR 应用通常会白屏时间比较久，而 SSR 应用则可以将页面的渲染时间缩短到很短。另外就是 SSR 对于 SEO 的优化效果更好。</p><p>SEO（Search Engine Optimization）：搜索引擎优化，即通过对网站的<code>结构、内容、关键字</code>等进行优化，让网站可以被搜索引擎收录，从而提高网站的排名。</p><p>因为 CSR 都是 js 动态生成的对于 HTML 的内容很少，爬虫很难爬到其中的内容，而 SSR 都是服务端渲染的，且返回的都是 HTML 页面，对于 SEO 的爬虫来说，容易识别更多的信息。</p><p>CSR 适合做一些 ToB 的管理后台系统等。</p><p>SSR 适合做一些大型的社交网站、电商网站、新闻网站等，因为这些网站需要让更多人知道，而 SSR 本身 对于 SEO 有一个很不错的优化。</p><h2 id="_9-nodejs-path-模块" tabindex="-1">9. NodeJs Path 模块 <a class="header-anchor" href="#_9-nodejs-path-模块" aria-label="Permalink to &quot;9. NodeJs Path 模块&quot;">​</a></h2><p>首先介绍 posix，posix 是 Portable Operating System Interface（可移植操作系统接口）的缩写，它是一套标准，定义了操作系统的接口。遵循这个规范的系统有：Linux、Unix、Mac OS X、Windows wsl 等。</p><p>但是 Windows 没有遵守这个标准，Windows 在路径上采用了不同于 posix 路径表示方法，即为反斜杠<code>\\</code>.</p><h3 id="path-basename" tabindex="-1">path.basename() <a class="header-anchor" href="#path-basename" aria-label="Permalink to &quot;path.basename()&quot;">​</a></h3><p>函数返回给定路径中的最后一部分</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node:path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a/b/c/foo/index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.posix.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pathUrl)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// posix写法 index.html</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.win32.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pathUrl)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// windows写法 index.html</span></span></code></pre></div><h3 id="path-dirname" tabindex="-1">path.dirname() <a class="header-anchor" href="#path-dirname" aria-label="Permalink to &quot;path.dirname()&quot;">​</a></h3><p>跟 path.baseename()互补，这是返回该文件的所在目录。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node:path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a/b/c/foo/index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pathUrl)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a/b/c/foo</span></span></code></pre></div><h3 id="path-extname" tabindex="-1">path.extname() <a class="header-anchor" href="#path-extname" aria-label="Permalink to &quot;path.extname()&quot;">​</a></h3><p>返回所传路径文件的扩展名</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node:path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a/b/c/foo/index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pathUrl)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// html</span></span></code></pre></div><h3 id="path-join" tabindex="-1">path.join() <a class="header-anchor" href="#path-join" aria-label="Permalink to &quot;path.join()&quot;">​</a></h3><p>这个 API 主要用来拼接路径的，而且支持<code>../</code>和<code>./</code>这样的操作符。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node:path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a\\b\\c</span></span></code></pre></div><h3 id="path-resolve" tabindex="-1">path.resolve() <a class="header-anchor" href="#path-resolve" aria-label="Permalink to &quot;path.resolve()&quot;">​</a></h3><p>该 API 主要用于相对路径解析成<code>绝对路径</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node:path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// C:\\Users\\plc\\Desktop\\my\\testnode\\index.html</span></span></code></pre></div><h3 id="path-parse-与-path-format" tabindex="-1">path.parse() 与 path.format() <a class="header-anchor" href="#path-parse-与-path-format" aria-label="Permalink to &quot;path.parse() 与 path.format()&quot;">​</a></h3><p>parse 是解析文件路径，接受一个路径，然后返回一个包含路径各个组成部分的对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node:path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/Desktop/a/b/c/d/index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pathUrl));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   root: &#39;/&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   dir: &#39;/Desktop/a/b/c/d&#39;, // 所在目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   base: &#39;index.html&#39;, // 完整文件名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ext: &#39;.html&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   name: &#39;index&#39; // 去除扩展名的文件名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// }</span></span></code></pre></div><p>而 path.format()则是 parse 的反过来</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node:path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  root: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dir: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/Desktop/a/b/c/d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  base: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ext: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pathObj)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /Desktop/a/b/c/d\\index.html</span></span></code></pre></div><h2 id="_10-nodejs-os-模块" tabindex="-1">10. Nodejs Os 模块 <a class="header-anchor" href="#_10-nodejs-os-模块" aria-label="Permalink to &quot;10. Nodejs Os 模块&quot;">​</a></h2><p>Nodejs 的 os 模块主要可以跟系统进行交，获取系统级别的信息、一些简单的操作。</p><h3 id="os-type-、os-platform-、os-relase-、os-homedir-、os-arch" tabindex="-1">os.type()、os.platform()、os.relase()、os.homedir()、os.arch() <a class="header-anchor" href="#os-type-、os-platform-、os-relase-、os-homedir-、os-arch" aria-label="Permalink to &quot;os.type()、os.platform()、os.relase()、os.homedir()、os.arch()&quot;">​</a></h3><ul><li>os.type() 获取系统的类型，Linux、Darwin、Windows_NT</li><li>os.platform() 获取操作系统所属平台</li><li>os.relase() 返回操作系统的版本号</li><li>os.homedir() 返回用户的家目录</li><li>os.arch() 返回操作系统的架构</li></ul><h3 id="os-cpus" tabindex="-1">os.cpus() <a class="header-anchor" href="#os-cpus" aria-label="Permalink to &quot;os.cpus()&quot;">​</a></h3><p>返回 CPU 线程的详细信息</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> os</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node:os&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cpus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回CPU的核心的详细信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cpus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回CPU的核心数量</span></span></code></pre></div><h3 id="os-networkinterfaces" tabindex="-1">os.networkInterfaces() <a class="header-anchor" href="#os-networkinterfaces" aria-label="Permalink to &quot;os.networkInterfaces()&quot;">​</a></h3><p>返回操作系统的网络信息，其中返回的 internal: 表示本地回环接口是否是内部接口，如果是 ture 表示是内部接口，false 表示是外部接口。外部接口能够访问到外网，而内部接口不能。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> os</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node:os&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> network </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">networkInterfaces</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">network </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(network).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 枚举所有合法的IPv4网卡</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> network) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (item.family </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;IPv4&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item.internal) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.address);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,98)]))}const c=i(t,[["render",h]]);export{E as __pageData,c as default};
